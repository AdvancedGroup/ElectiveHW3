{
  "name": "Prisoner's Dilemma",
  "tagline": "",
  "body": "###Due Date  \r\nThis assignmentâ€™s first due is **Wed 11:59:59pm, 27th July**.  \r\nThe rank will be available after that.  \r\nThen you can keep updating until **1st August**.  \r\n\r\n###Background  \r\nThe Prisoner's Dilemma is a classic problem in game theory which is often used to explore behaviors in a situation of strategic interdependence.     \r\nThe usual presentation of the problem is that two suspects are being interrogated separately by a detective.  The detective\r\nhas insufficient evidence to make an arrest, so is depending on a plea bargain to make a convincing case. The detective offers each suspect the following deal: **defect** and admit to the crime in exchange for early parole, or **cooperate** (with the other prisoner) and refuse to admit the crime. Neither suspect is told of the other's choice.\r\n\r\nAs one might expect, if both cooperate (C,C) (=don&#39;t admit) then both are released (for payoff of 3 each). If one defects while the other cooperates, (D,C) or (C,D), then the person who defects (=admits) is released and rewarded (payoff 5) while the other serves a long sentence (payoff 0). If both defect (D,D) (=admit) then they both go to prison\r\nbut with early parole (payoff 1). We use payoffs adjusted by +5 here.    \r\n\r\nIn this usual presentation of the Prisoner&#39;s Dilemma only one equilibrium exists: both suspects defect and both face prison time with early parole. As we have seen, this is a dominant strategy equilibrium. However, if both suspects had cooperated, then both would have been gone free. This is the dilemma!  \r\n\r\nTo make more fun, the information your player receives about its opponent's previous action is noisy, i.e. with probability 0.05 your player receives incorrect information about the previous action of the other player.  \r\n\r\n###Task  \r\nYour task is to create an agent for the iterated noisy prisoner's dilemma described above. In each round, there will be a 5% probability of misdetecting your opponent's move. The scores for each round are as follows.  \r\n\r\n   ==C====D==  \r\nC (3, 3) (0, 5)  \r\nD (5, 0) (1, 1)  \r\n\r\nThe scores are computed using the actual joint action of the two agents, even if the 5% noise leads one or both agents to get the wrong information about the other's action.    \r\n\r\n###Rule  \r\nYou will be modeling a game strategy using an state machine, following the description in class.\r\nIn your file, you are going to use each line to describe one state in the state machine.\r\n\r\nEach line has format:  \r\n_**state_id: prob_of_cooperate state_on_cc state_on_cd state_on_dc state_on_dd**_    \r\n\r\nWhere:\r\n - **state_id** is the id of the state. These must be 0,1,2,3,4 in that order. And you can have at most 10 states which means id has to be from 0 to 9.  \r\n - **prob_of_cooperate** is the probability of cooperating when in this state (and thus one minus this value is the probability of defecting).    \r\n - **state_on_cc** is the state to move to on information that both agents cooperated in this round.  \r\n - **state_on_cd** is the state to move to on information that your agent cooperated and the other agent defected in this round.  \r\n - **state_on_dc** is the state to move to on information that your agent defected and the other agent cooperated in this round.  \r\n - **state_on_dd** is the state to move to on information that both agents defected in this round.  \r\n\r\nRemember that your automata gets noisy information about the play of the other agent. With probability 0.05, the transition will be based on the wrong information about the other agent's action.   \r\nState 0 will always be your start state.  \r\n\r\n**Here are some examples:**       \r\n0: 0.4 0 0 0 0   \r\nThis is a simple one that has one state, and thus always stays in it. It keeps using C with 0.4 probability.  \r\n \r\nA slightly more complicated automaton might have two states with different probabilities of cooperation, and switch between them based on what the opponent does. It might look something like this:  \r\n0: 0.6 1 0 0 1  \r\n1: 0.8 1 0 0 1  \r\n\r\nThere are two states (0 is always the initial state). When in state 0, the automaton will cooperate with probability 0.6 and in two situations(if both players cooperated or both players defected it will move to state 1. When in state 1, it will cooperate with probability 0.8 and will return to state 0 if the players acted differently (one defected and one cooperated).  \r\n\r\n###Submission:  \r\nPlease email us(mikiiiiiiiii9@gmail.com) your strategy with the format described in a txt file.  \r\nThe subject of e-mail should be **Prisoner's Dilemma- YOUR NAME**.    \r\n\r\n###Competition  \r\nWe will run each submitted state machine against each of the others 10 times, with each game lasting 100 rounds. We will rank agents by their cumulative score.  \r\n\r\n\r\n``",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}